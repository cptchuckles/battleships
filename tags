!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	/3fdf28bc/
$(TARGET)	makefile	/^$(TARGET) : $(OBJS)$/;"	t
%.o	makefile	/^%.o : %.cpp$/;"	t
/g/ battleships	README.md	/^# \/g\/ battleships$/;"	c
AIController	src/AIController.cpp	/^AIController::AIController(Board& target, int delay) : target{target}, delay{delay}$/;"	f	class:AIController
AIController	src/AIController.h	/^class AIController$/;"	c
ActivateTurn	src/AIController.cpp	/^void AIController::ActivateTurn()$/;"	f	class:AIController	typeref:typename:void
Attack	src/Board.cpp	/^bool Board::Attack(Cell cell)$/;"	f	class:Board	typeref:typename:bool
Attack	src/Board.cpp	/^bool Board::Attack(int col, int row)$/;"	f	class:Board	typeref:typename:bool
BATTLESHIP_UTILITY	src/Utility.h	/^#define BATTLESHIP_UTILITY$/;"	d
Board	src/Board.h	/^  Board(int cellsize, int cols, int rows, int x, int y,$/;"	f	class:Board
Board	src/Board.h	/^class Board : public IDrawable$/;"	c
COMPILER_FLAGS	makefile	/^COMPILER_FLAGS = -w -std=c++17$/;"	m
CalculateCell	src/AIController.cpp	/^Board::Cell AIController::CalculateCell()$/;"	f	class:AIController	typeref:typename:Board::Cell
Cell	src/Board.h	/^  struct Cell {$/;"	s	class:Board
CellSize	src/main.cpp	/^const int CellSize = 32; \/\/pixels$/;"	v	typeref:typename:const int
CellType	src/Board.h	/^  enum CellType {$/;"	g	class:Board
CheckCellValid	src/AIController.cpp	/^bool AIController::CheckCellValid(const Board::Cell& cell) const$/;"	f	class:AIController	typeref:typename:bool
CheckDefeated	src/Board.cpp	/^bool Board::CheckDefeated() const$/;"	f	class:Board	typeref:typename:bool
CheckDelayTimer	src/AIController.cpp	/^bool AIController::CheckDelayTimer()$/;"	f	class:AIController	typeref:typename:bool
CheckSpaceFree	src/ShipBuilder.cpp	/^bool ShipBuilder::CheckSpaceFree(Ship& s) const$/;"	f	class:ShipBuilder	typeref:typename:bool
Clear	src/Board.cpp	/^void Board::Clear()$/;"	f	class:Board	typeref:typename:void
ClearInput	src/InputPrompt.cpp	/^void InputPrompt::ClearInput()$/;"	f	class:InputPrompt	typeref:typename:void
ConfineShipToBoard	src/ShipBuilder.cpp	/^void ShipBuilder::ConfineShipToBoard()$/;"	f	class:ShipBuilder	typeref:typename:void
ConstructShip	src/ShipBuilder.cpp	/^bool ShipBuilder::ConstructShip(unsigned int length)$/;"	f	class:ShipBuilder	typeref:typename:bool
Draw	src/Board.cpp	/^void Board::Draw(sf::RenderTarget& target) const$/;"	f	class:Board	typeref:typename:void
Draw	src/InputPrompt.cpp	/^void InputPrompt::Draw(sf::RenderTarget& target) const$/;"	f	class:InputPrompt	typeref:typename:void
DrawBoard	src/ShipBuilder.cpp	/^void ShipBuilder::DrawBoard(sf::RenderTarget& target)$/;"	f	class:ShipBuilder	typeref:typename:void
END	src/main.cpp	/^  END$/;"	e	enum:GameState	file:
FULL	src/Board.h	/^    FULL,$/;"	e	enum:Board::CellType
FinalizeShip	src/ShipBuilder.cpp	/^bool ShipBuilder::FinalizeShip()$/;"	f	class:ShipBuilder	typeref:typename:bool
FlipShip	src/ShipBuilder.cpp	/^void ShipBuilder::FlipShip()$/;"	f	class:ShipBuilder	typeref:typename:void
GameState	src/main.cpp	/^enum class GameState {$/;"	g	file:
Get	src/KeyInput.cpp	/^KeyInput& KeyInput::Get()$/;"	f	class:KeyInput	typeref:typename:KeyInput &
GetAdjacentCells	src/AIController.cpp	/^std::vector<Board::Cell> AIController::GetAdjacentCells(const Board::Cell& cell)$/;"	f	class:AIController	typeref:typename:std::vector<Board::Cell>
GetCellFromString	src/Board.cpp	/^std::optional<Board::Cell> Board::GetCellFromString(std::string input) const$/;"	f	class:Board	typeref:typename:std::optional<Board::Cell>
GetCellType	src/Board.cpp	/^std::optional<Board::CellType> Board::GetCellType(Board::Cell cell) const$/;"	f	class:Board	typeref:typename:std::optional<Board::CellType>
GetCellType	src/Board.cpp	/^std::optional<Board::CellType> Board::GetCellType(int col, int row) const$/;"	f	class:Board	typeref:typename:std::optional<Board::CellType>
GetContent	src/InputPrompt.cpp	/^std::string InputPrompt::GetContent()$/;"	f	class:InputPrompt	typeref:typename:std::string
GetDimensions	src/Board.cpp	/^Board::Cell Board::GetDimensions() const$/;"	f	class:Board	typeref:typename:Board::Cell
GetShip	src/ShipBuilder.cpp	/^ShipBuilder::Ship* ShipBuilder::GetShip() const$/;"	f	class:ShipBuilder	typeref:typename:ShipBuilder::Ship *
HIT	src/Board.h	/^    HIT$/;"	e	enum:Board::CellType
IDrawable	src/IDrawable.h	/^class IDrawable$/;"	c
INCLUDE_PATHS	makefile	/^INCLUDE_PATHS = -I\/usr\/include\/SFML$/;"	m
InputPrompt	src/InputPrompt.h	/^  InputPrompt(std::string caption, sf::Text& TextResource, int x=0, int y=0) : caption{caption},/;"	f	class:InputPrompt
InputPrompt	src/InputPrompt.h	/^class InputPrompt : public IDrawable$/;"	c
KeyInput	src/KeyInput.h	/^  KeyInput() {};$/;"	f	class:KeyInput
KeyInput	src/KeyInput.h	/^class KeyInput$/;"	c
KeyPressed	src/KeyInput.cpp	/^bool KeyInput::KeyPressed(sf::Keyboard::Key key)$/;"	f	class:KeyInput	typeref:typename:bool
Keystroke	src/KeyInput.h	/^  struct Keystroke {$/;"	s	class:KeyInput
LIB_PATHS	makefile	/^LIB_PATHS = -L\/usr\/lib$/;"	m
LINKER_FLAGS	makefile	/^LINKER_FLAGS = -lsfml-graphics -lsfml-audio -lsfml-network -lsfml-system -lsfml-window$/;"	m
MISS	src/Board.h	/^    MISS,$/;"	e	enum:Board::CellType
Mode	src/AIController.h	/^  enum class Mode {$/;"	g	class:AIController
NextCellInTrace	src/AIController.cpp	/^std::optional<Board::Cell> AIController::NextCellInTrace() const$/;"	f	class:AIController	typeref:typename:std::optional<Board::Cell>
OBJS	makefile	/^OBJS = \\$/;"	m
OPEN	src/Board.h	/^    OPEN,$/;"	e	enum:Board::CellType
PLAY	src/main.cpp	/^  PLAY,$/;"	e	enum:GameState	file:
RAND	src/AIController.h	/^    RAND,$/;"	e	enum:AIController::Mode
Rand	src/Utility.h	/^  inline int Rand(int low, int high)$/;"	f	namespace:util	typeref:typename:int
RandomShip	src/ShipBuilder.cpp	/^bool ShipBuilder::RandomShip(unsigned int length)$/;"	f	class:ShipBuilder	typeref:typename:bool
RandomValidCell	src/AIController.cpp	/^Board::Cell AIController::RandomValidCell() const$/;"	f	class:AIController	typeref:typename:Board::Cell
Return	src/KeyInput.cpp	/^bool KeyInput::Return()$/;"	f	class:KeyInput	typeref:typename:bool
SEARCH	src/AIController.h	/^    SEARCH,$/;"	e	enum:AIController::Mode
SETUP	src/main.cpp	/^  SETUP,$/;"	e	enum:GameState	file:
SetCaption	src/InputPrompt.cpp	/^void InputPrompt::SetCaption(std::string newCap)$/;"	f	class:InputPrompt	typeref:typename:void
SetCell	src/Board.cpp	/^bool Board::SetCell(int col, int row, CellType type)$/;"	f	class:Board	typeref:typename:bool
SetDisplayResource	src/Board.cpp	/^void Board::SetDisplayResource(sf::Text* TextResource)$/;"	f	class:Board	typeref:typename:void
SetDraw	src/Board.cpp	/^void Board::SetDraw(bool d)$/;"	f	class:Board	typeref:typename:void
SetHidden	src/Board.cpp	/^void Board::SetHidden(bool hide)$/;"	f	class:Board	typeref:typename:void
SetPos	src/InputPrompt.cpp	/^void InputPrompt::SetPos(int newx, int newy)$/;"	f	class:InputPrompt	typeref:typename:void
Ship	src/ShipBuilder.h	/^  struct Ship {$/;"	s	class:ShipBuilder
ShipBuilder	src/ShipBuilder.h	/^  ShipBuilder(Board& board) : board{board}$/;"	f	class:ShipBuilder
ShipBuilder	src/ShipBuilder.h	/^class ShipBuilder$/;"	c
Strike	src/AIController.cpp	/^bool AIController::Strike()$/;"	f	class:AIController	typeref:typename:bool
TARGET	makefile	/^TARGET=build\/battleships$/;"	m
TRACE	src/AIController.h	/^    TRACE$/;"	e	enum:AIController::Mode
Update	src/InputPrompt.cpp	/^void InputPrompt::Update()$/;"	f	class:InputPrompt	typeref:typename:void
Update	src/KeyInput.cpp	/^void KeyInput::Update()$/;"	f	class:KeyInput	typeref:typename:void
Update	src/ShipBuilder.cpp	/^void ShipBuilder::Update(sf::RenderTarget& target)$/;"	f	class:ShipBuilder	typeref:typename:void
WindowHeight	src/main.cpp	/^const int WindowHeight = 24*CellSize;$/;"	v	typeref:typename:const int
WindowWidth	src/main.cpp	/^const int WindowWidth = 10*CellSize;$/;"	v	typeref:typename:const int
ai	src/main.cpp	/^AIController ai = {board_2, 2};$/;"	v	typeref:typename:AIController
all	makefile	/^all : $(TARGET)$/;"	t
arial	src/main.cpp	/^sf::Font arial;$/;"	v	typeref:typename:sf::Font
atEndScreen	src/main.cpp	/^void atEndScreen()$/;"	f	typeref:typename:void
board	src/ShipBuilder.h	/^  Board& board;$/;"	m	class:ShipBuilder	typeref:typename:Board &
board_1	src/main.cpp	/^Board board_1 {CellSize, 9,10,$/;"	v	typeref:typename:Board
board_2	src/main.cpp	/^Board board_2 {CellSize, 9,10,$/;"	v	typeref:typename:Board
buffer	src/InputPrompt.h	/^  std::string buffer;$/;"	m	class:InputPrompt	typeref:typename:std::string
buildEnemyShips	src/main.cpp	/^void buildEnemyShips()$/;"	f	typeref:typename:void
caption	src/InputPrompt.h	/^  std::string caption;$/;"	m	class:InputPrompt	typeref:typename:std::string
caption	src/main.cpp	/^sf::Text caption = {"aeiou", arial, (CellSize*3)\/4};$/;"	v	typeref:typename:sf::Text
cell_size	src/Board.h	/^  int cell_size;$/;"	m	class:Board	typeref:typename:int
clean	makefile	/^clean :$/;"	t
col	src/Board.h	/^    int col, row;$/;"	m	struct:Board::Cell	typeref:typename:int
col	src/ShipBuilder.h	/^    int col,row, length;$/;"	m	struct:ShipBuilder::Ship	typeref:typename:int
cold_hit	src/AIController.h	/^  std::optional<Board::Cell> cold_hit = std::nullopt;$/;"	m	class:AIController	typeref:typename:std::optional<Board::Cell>
cols	src/AIController.h	/^  int cols, rows, delay;$/;"	m	class:AIController	typeref:typename:int
cols	src/Board.h	/^  int cols, rows;$/;"	m	class:Board	typeref:typename:int
cols	src/ShipBuilder.h	/^  int cols, rows;$/;"	m	class:ShipBuilder	typeref:typename:int
delay	src/AIController.h	/^  int cols, rows, delay;$/;"	m	class:AIController	typeref:typename:int
display	src/Board.h	/^  sf::Text* display = nullptr;$/;"	m	class:Board	typeref:typename:sf::Text *
display	src/InputPrompt.h	/^  sf::Text& display;$/;"	m	class:InputPrompt	typeref:typename:sf::Text &
draw	src/Board.h	/^  bool draw = true;$/;"	m	class:Board	typeref:typename:bool
enemyTurn	src/main.cpp	/^void enemyTurn()$/;"	f	typeref:typename:void
full	src/main.cpp	/^sf::CircleShape full{CellSize\/2};$/;"	v	typeref:typename:sf::CircleShape
full_cell	src/Board.h	/^  sf::Shape& full_cell;$/;"	m	class:Board	typeref:typename:sf::Shape &
gameReset	src/main.cpp	/^void gameReset()$/;"	f	typeref:typename:void
gameSetup	src/main.cpp	/^void gameSetup()$/;"	f	typeref:typename:void
grid	src/Board.h	/^  std::vector<CellType> grid;$/;"	m	class:Board	typeref:typename:std::vector<CellType>
hidden	src/Board.h	/^  bool hidden = false;$/;"	m	class:Board	typeref:typename:bool
hit	src/main.cpp	/^sf::CircleShape hit{CellSize\/2};$/;"	v	typeref:typename:sf::CircleShape
hit_cell	src/Board.h	/^  sf::Shape& hit_cell;$/;"	m	class:Board	typeref:typename:sf::Shape &
inPlay	src/main.cpp	/^void inPlay()$/;"	f	typeref:typename:void
init	src/main.cpp	/^bool init()$/;"	f	typeref:typename:bool
isMyTurn	src/AIController.cpp	/^bool AIController::isMyTurn() const$/;"	f	class:AIController	typeref:typename:bool
isdown	src/KeyInput.h	/^    bool isdown=false;$/;"	m	struct:KeyInput::Keystroke	typeref:typename:bool
keys	src/KeyInput.h	/^  std::map<sf::Keyboard::Key, Keystroke> keys;$/;"	m	class:KeyInput	typeref:typename:std::map<sf::Keyboard::Key,Keystroke>
last_hit	src/AIController.h	/^  std::optional<Board::Cell> last_hit = std::nullopt;$/;"	m	class:AIController	typeref:typename:std::optional<Board::Cell>
length	src/ShipBuilder.h	/^    int col,row, length;$/;"	m	struct:ShipBuilder::Ship	typeref:typename:int
main	src/main.cpp	/^int main()$/;"	f	typeref:typename:int
miss	src/main.cpp	/^sf::CircleShape miss{CellSize\/2};$/;"	v	typeref:typename:sf::CircleShape
miss_cell	src/Board.h	/^  sf::Shape& miss_cell;$/;"	m	class:Board	typeref:typename:sf::Shape &
mode	src/AIController.h	/^  Mode mode = Mode::RAND;$/;"	m	class:AIController	typeref:typename:Mode
myturn	src/AIController.h	/^  bool myturn = false;$/;"	m	class:AIController	typeref:typename:bool
open	src/main.cpp	/^sf::CircleShape open{CellSize\/2};$/;"	v	typeref:typename:sf::CircleShape
open_cell	src/Board.h	/^  sf::Shape& open_cell;$/;"	m	class:Board	typeref:typename:sf::Shape &
operator !=	src/Board.h	/^    bool operator!=(Cell const& in) { return !operator==(in); }$/;"	f	struct:Board::Cell	typeref:typename:bool
operator +	src/Board.h	/^    friend Cell operator+(const Cell& a, const Cell& b) { return std::move(Cell{a.col+b.col, a.r/;"	f	class:Board	typeref:typename:Cell
operator -	src/Board.h	/^    friend Cell operator-(const Cell& a, const Cell& b) { return std::move(Cell{a.col-b.col, a.r/;"	f	class:Board	typeref:typename:Cell
operator ==	src/Board.h	/^    bool operator==(Cell const& in) { return (col==in.col && row==in.row); }$/;"	f	struct:Board::Cell	typeref:typename:bool
pressed	src/KeyInput.h	/^    bool pressed=false;$/;"	m	struct:KeyInput::Keystroke	typeref:typename:bool
prompt	src/main.cpp	/^InputPrompt prompt = {"wew lads", caption, 0,23*CellSize};$/;"	v	typeref:typename:InputPrompt
renderer	src/main.cpp	/^std::vector<IDrawable*> renderer;$/;"	v	typeref:typename:std::vector<IDrawable * >
row	src/Board.h	/^    int col, row;$/;"	m	struct:Board::Cell	typeref:typename:int
row	src/ShipBuilder.h	/^    int col,row, length;$/;"	m	struct:ShipBuilder::Ship	typeref:typename:int
rows	src/AIController.h	/^  int cols, rows, delay;$/;"	m	class:AIController	typeref:typename:int
rows	src/Board.h	/^  int cols, rows;$/;"	m	class:Board	typeref:typename:int
rows	src/ShipBuilder.h	/^  int cols, rows;$/;"	m	class:ShipBuilder	typeref:typename:int
sf	src/Board.h	/^namespace sf {$/;"	n
sf	src/IDrawable.h	/^namespace sf {$/;"	n
sf	src/InputPrompt.h	/^namespace sf {$/;"	n
sf	src/ShipBuilder.h	/^namespace sf {$/;"	n
ship	src/ShipBuilder.h	/^  Ship* ship = nullptr;$/;"	m	class:ShipBuilder	typeref:typename:Ship *
shipSizes	src/main.cpp	/^const int shipSizes[] = {2,3,3,4,5};$/;"	v	typeref:typename:const int[]
src/AIController.o	makefile	/^src\/AIController.o : \\$/;"	t
src/Board.o	makefile	/^src\/Board.o : \\$/;"	t
src/InputPrompt.o	makefile	/^src\/InputPrompt.o : \\$/;"	t
src/ShipBuilder.o	makefile	/^src\/ShipBuilder.o : \\$/;"	t
src/main.o	makefile	/^src\/main.o : \\$/;"	t
state	src/main.cpp	/^GameState state = GameState::SETUP;$/;"	v	typeref:typename:GameState
streak	src/AIController.h	/^  bool streak = false;$/;"	m	class:AIController	typeref:typename:bool
target	src/AIController.h	/^  Board& target;$/;"	m	class:AIController	typeref:typename:Board &
timestamp	src/AIController.h	/^  struct timespec timestamp;$/;"	m	class:AIController	typeref:struct:timespec
try_cells	src/AIController.h	/^  std::vector<Board::Cell> try_cells;$/;"	m	class:AIController	typeref:typename:std::vector<Board::Cell>
util	src/Utility.h	/^namespace util$/;"	n
vertical	src/ShipBuilder.h	/^    bool vertical;$/;"	m	struct:ShipBuilder::Ship	typeref:typename:bool
window	src/main.cpp	/^sf::RenderWindow window = {$/;"	v	typeref:typename:sf::RenderWindow
x	src/Board.h	/^  int x, y;$/;"	m	class:Board	typeref:typename:int
x	src/InputPrompt.h	/^  int x, y;$/;"	m	class:InputPrompt	typeref:typename:int
y	src/Board.h	/^  int x, y;$/;"	m	class:Board	typeref:typename:int
y	src/InputPrompt.h	/^  int x, y;$/;"	m	class:InputPrompt	typeref:typename:int
~Board	src/Board.h	/^  ~Board() {$/;"	f	class:Board
~ShipBuilder	src/ShipBuilder.h	/^  ~ShipBuilder()$/;"	f	class:ShipBuilder
